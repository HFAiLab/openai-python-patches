diff --git _constants.py _constants.py
index dffb8ec..2ccd789 100644
--- _constants.py
+++ _constants.py
@@ -8,7 +8,7 @@ OVERRIDE_CAST_TO_HEADER = "____stainless_override_cast_to"
 # default timeout is 10 minutes
 DEFAULT_TIMEOUT = httpx.Timeout(timeout=600.0, connect=5.0)
 DEFAULT_MAX_RETRIES = 2
-DEFAULT_LIMITS = httpx.Limits(max_connections=100, max_keepalive_connections=20)
+DEFAULT_LIMITS = httpx.Limits(max_connections=1000, max_keepalive_connections=200)
 
 INITIAL_RETRY_DELAY = 0.5
 MAX_RETRY_DELAY = 8.0
diff --git _streaming.py _streaming.py
index 74878fd..90b03a2 100644
--- _streaming.py
+++ _streaming.py
@@ -4,7 +4,7 @@ from __future__ import annotations
 import json
 import inspect
 from types import TracebackType
-from typing import TYPE_CHECKING, Any, Generic, TypeVar, Iterator, AsyncIterator, cast
+from typing import TYPE_CHECKING, Any, Generic, TypeVar, Iterator, AsyncIterator, cast, Mapping
 from typing_extensions import Self, TypeGuard, override, get_origin
 
 import httpx
@@ -37,20 +37,20 @@ class Stream(Generic[_T]):
         self._decoder = SSEDecoder()
         self._iterator = self.__stream__()
 
-    def __next__(self) -> _T:
+    def __next__(self) -> Mapping[str, object]:
         return self._iterator.__next__()
 
-    def __iter__(self) -> Iterator[_T]:
+    def __iter__(self) -> Iterator[Mapping[str, object]]:
         for item in self._iterator:
             yield item
 
     def _iter_events(self) -> Iterator[ServerSentEvent]:
         yield from self._decoder.iter(self.response.iter_lines())
 
-    def __stream__(self) -> Iterator[_T]:
-        cast_to = cast(Any, self._cast_to)
-        response = self.response
-        process_data = self._client._process_response_data
+    def __stream__(self) -> Iterator[Mapping[str, object]]:
+        # cast_to = cast(Any, self._cast_to)
+        # response = self.response
+        # process_data = self._client._process_response_data
         iterator = self._iter_events()
 
         for sse in iterator:
@@ -66,7 +66,8 @@ class Stream(Generic[_T]):
                         body=data["error"],
                     )
 
-                yield process_data(data=data, cast_to=cast_to, response=response)
+                # yield process_data(data=data, cast_to=cast_to, response=response)
+                yield data
 
         # Ensure the entire stream is consumed
         for _sse in iterator:
@@ -110,10 +111,10 @@ class AsyncStream(Generic[_T]):
         self._decoder = SSEDecoder()
         self._iterator = self.__stream__()
 
-    async def __anext__(self) -> _T:
+    async def __anext__(self) -> Mapping[str, object]:
         return await self._iterator.__anext__()
 
-    async def __aiter__(self) -> AsyncIterator[_T]:
+    async def __aiter__(self) -> AsyncIterator[Mapping[str, object]]:
         async for item in self._iterator:
             yield item
 
@@ -121,10 +122,10 @@ class AsyncStream(Generic[_T]):
         async for sse in self._decoder.aiter(self.response.aiter_lines()):
             yield sse
 
-    async def __stream__(self) -> AsyncIterator[_T]:
-        cast_to = cast(Any, self._cast_to)
-        response = self.response
-        process_data = self._client._process_response_data
+    async def __stream__(self) -> AsyncIterator[Mapping[str, object]]:
+        # cast_to = cast(Any, self._cast_to)
+        # response = self.response
+        # process_data = self._client._process_response_data
         iterator = self._iter_events()
 
         async for sse in iterator:
@@ -140,7 +141,8 @@ class AsyncStream(Generic[_T]):
                         body=data["error"],
                     )
 
-                yield process_data(data=data, cast_to=cast_to, response=response)
+                # yield process_data(data=data, cast_to=cast_to, response=response)
+                yield data
 
         # Ensure the entire stream is consumed
         async for _sse in iterator:
